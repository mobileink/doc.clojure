<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "../dtd/task.dtd">
<task id="tour" xml:lang="en-us">
<title>A Quick Tour</title>
<shortdesc>We create a minimal project and explore its structure and
configuration.</shortdesc>
<prolog><metadata>
<keywords><indexterm>New project</indexterm></keywords>
</metadata></prolog>
<taskbody>
<!-- <prereq>First, Install Leiningen.</prereq> -->
<context>
<p>
  A minimal Leiningen project involves: a directory structure, a
  project configuration file (project.clj), and source code files.  In
  addition to these static resources, Leiningen dynamically determines
  a project map, a dependency tree, and several other structures.
  This section takes you through some simple steps to exlore these
  elements.
</p>
</context>
<steps>
  <step><cmd>Create a new project by executing: <userinput>lein new app
  my-app</userinput></cmd>
  <info>
    where <userinput>lein</userinput> is the Leiningen command, and the args are:
    <parml>
      <plentry>
	<pt>new</pt>
	<pd>a Leiningen <i>task</i>.  To see the syntax and semantics
	of this task, run <userinput>lein help new</userinput>.  To
	see a list of the tasks that come preinstalled, run
	<userinput>lein help</userinput>.
	</pd>
      </plentry>
      <plentry>
	<pt>app</pt>
	<pd>is the name of a project template, in this case the
	default application template.  To see a list of preinstalled
	templates, run <userinput>lein help new</userinput>.
	Leiningen's concept of <i>task</i> is discussed in detail
	under the X topic of this guide.</pd>
      </plentry>
      <plentry>
	<pt>my-app</pt>
	<pd>is the name to be used for the new project</pd>
      </plentry>
    </parml>
  </info>
  <stepresult>
    <p>
  This will create a hierarchy of directories and populate it with
  some files generated from templates:
    </p>
<pre>
.
./.gitignore
./doc
./doc/intro.md
./project.clj
./README.md
./src
./src/my_app
./src/my_app/core.clj
./test
./test/my_app
./test/my_app/core_test.clj
</pre>
</stepresult>
</step>
<step><cmd>Take a look at the Leiningen project file buy running
<userinput>less my-app/project.clj</userinput></cmd>
<stepresult>
  You should see something like:
  <pre>
(defproject my-app "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.5.1"]])
  </pre>
  <note>
    This has the form of a function application, where
    <codeph>defproject</codeph> is the function, and the args come as
    a list of pairs.  In fact, <codeph>defproject</codeph> is a macro
    that expands into the definition of a Clojure map named
    <codeph>project</codeph>.  Each task - both those preinstalled and
    those defined by plugins - takes this <codeph>project</codeph> map
    as input.  The key point is that the key-value pairs of the
    <codeph>project</codeph> map are thus available for use by task
    implementations to control setting of options etc. for the
    processes they manage.
  </note>
  <note>
    The final <codeph>project</codeph> map is determined by a
    combination of several sources in addition to project.clj, such as
    <varname>~/.lein/profiles.clj</varname>.  See X for details.
  </note>
  <p>
    In this minimal example, the only really functional parameter is
    <codeph>:dependencies</codeph>.  This is used to specify which
    libraries/jars the project uses (and thus depends on).  One of the
    best things about Leiningen is its powerful management of
    dependencies.  Using the [?] library under the hood, Leiningen is
    able to construct the entire dependency graph for the project and
    arrange for everything needed to be installed.  Leiningen's
    dependency management capabilities are described in X.
  </p>
  <note type="important">
    Leiningen dependency specification uses the naming conventions
    established by Maven: artifact-group/artifact-id.  Etc.  See X for
    details.
  </note>
</stepresult>
</step>

<step><cmd>Examine the project map:
<userinput>lein pprint</userinput>
</cmd>
<stepresult>
  You should see something like:
  <pre>
{:compile-path "/Users/gar/tmp/my-app/target/classes",
 :group "my-app",
 :license
 {:name "Eclipse Public License",
  :url "http://www.eclipse.org/legal/epl-v10.html"},
 :global-vars {},
 :checkout-deps-shares
 [:source-paths
  :test-paths
  :resource-paths
  :compile-path
  #&amp;Var@3e25e2b8:
    #amp;classpath$checkout_deps_paths leiningen.core.classpath$checkout_deps_paths@89bbe8c>>],
 :dependencies
 ([org.clojure/clojure "1.5.1"]
  [org.clojure/tools.nrepl "0.2.3" :exclusions ([org.clojure/clojure])]
  [clojure-complete/clojure-complete
   "0.2.3"
   :exclusions
   ([org.clojure/clojure])]),
 :plugin-repositories
 [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}]
  ["clojars" {:url "https://clojars.org/repo/"}]],
 :test-selectors {:default (constantly true)},
 :target-path "/Users/gar/tmp/my-app/target",
 :name "my-app",
 :deploy-repositories
 [["clojars"
   {:username :gpg,
    :url "https://clojars.org/repo/",
    :password :gpg}]],
 :root "/Users/gar/tmp/my-app",
 :offline? false,
 :source-paths ("/Users/gar/tmp/my-app/src"),
 :certificates ["clojars.pem"],
 :version "0.1.0-SNAPSHOT",
 :jar-exclusions [#"^\."],
 :profiles {:uberjar {:aot :all}},
 :prep-tasks ["javac" "compile"],
 :url "http://example.com/FIXME",
 :repositories
 [["central" {:snapshots false, :url "http://repo1.maven.org/maven2/"}]
  ["clojars" {:url "https://clojars.org/repo/"}]],
 :resource-paths
 ("/Users/gar/tmp/my-app/dev-resources"
  "/Users/gar/tmp/my-app/resources"),
 :uberjar-exclusions [#"(?i)^META-INF/[^/]*\.(SF|RSA|DSA)$"],
 :main my-app.core,
 :jvm-opts ["-XX:+TieredCompilation" "-XX:TieredStopAtLevel=1"],
 :eval-in :subprocess,
 :plugins
 ([lein-localrepo/lein-localrepo "0.4.1"]
  [lein-difftest/lein-difftest "1.3.8"]
  [org.clojure/java.classpath "0.2.0"]
  [lein-marginalia/lein-marginalia "0.7.1"]
  [lein-mustache/lein-mustache "0.2"]
  [lein-pprint/lein-pprint "1.1.1"]),
 :native-path "/Users/gar/tmp/my-app/target/native",
 :description "FIXME: write description",
 :test-paths ("/Users/gar/tmp/my-app/test"),
 :clean-targets [:target-path],
 :aliases nil}
  </pre>

  <p>
    Take some time to look this over.  Most of these parameters you
    will never have to deal with, but it's good to have an idea of
    what sorts of things Leiningen is interested in.
  </p>

  <note>
    The predefined paramters are documented in the Technical Reference
    Manual.  Other chapters of this User's Guide explain how to use
    them.
  </note>

  <note>
    We should distinguish between the project map that results from
    Leiningen's work and the defproject map in project.clj that forms
    the starting point for project map construction.
  </note>

</stepresult>
</step>

<step><cmd>Tell Leiningen to install all dependencies by running
<userinput>lein deps</userinput></cmd>
<info>Since you already have Clojure installed, you probably won't see any output.</info>
</step>

<step><cmd>Check your dependency tree:
<userinput>lein deps :tree</userinput></cmd>
<stepresult>
  You should see something like the following:
<pre>
 [clojure-complete "0.2.3" :exclusions [[org.clojure/clojure]]]
 [org.clojure/clojure "1.5.1"]
 [org.clojure/tools.nrepl "0.2.3" :exclusions [[org.clojure/clojure]]]
</pre>
<p>
  This is a complete listing of the jars your project depends on,
  derived from your project.clj :dependencies parameter plus a set of
  default maps to be described later.  Since this is a tree
  representation, you can infer that these three libraries are
  independently specified; none of them has required any of the others
  as a dependency.  In fact, <codeph>clojure-complete</codeph> and
  <codeph>org.clojure/tools.nrepl</codeph> are both specified as
  dependencies by the default <codeph>:base</codeph> <i>profile</i>,
  which means that they will always be in the dependency tree for
  every project (unless overriden).  Profiles are named maps that can
  be used to customize the <codeph>project</codeph> map in various
  ways; they are fully described in X.
</p>
</stepresult>

</step>

<step><cmd>Now let's take a look at the application code installed by
the <codeph>app</codeph> template.  Use your editor, or run <userinput>cat src/my_app/core.clj</userinput></cmd>
<stepresult>
  <p>The contents of <filepath>my-app/src/my_app/core.clj</filepath>
  should look something like:</p>
<pre>
(ns my-app.core
  (:gen-class))

(defn -main
  "I don't do a whole lot ... yet."
  [&amp; args]
  (println "Hello, World!"))
</pre>
<note type="notice">
  The <codeph>:gen-class</codeph> option and the definition of
  <codeph>-main</codeph>.  Remember this was produced by the
  application template, rather than the library template.  So it
  assumes you want to execute the result, which means you need to
  generate Java byte code.  That's what :gen-class does.  You also
  need a main entry point; thats what <codeph>-main</codeph> does.
</note>
<note type="warning">
  In case it isn't obvious: to effectively use Leiningen, you need to
  know Clojure.  That is, the better your mastery of Clojure, the more
  you can do with Leiningen.  Leiningen is a Clojure application, after all.
</note>
</stepresult>
</step>

</steps>
<result>
</result>
</taskbody>
</task>
